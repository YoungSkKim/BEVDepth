import mmcv
logger = mmcv.utils.get_logger('mmdet')
logger.setLevel('WARNING')

import torch

from layers.backbones.lss_fpn_radar import LSSFPNPts
from layers.backbones.backbone_point import BackbonePoint
from layers.fuser.conv_fuser import ConvFuser
from layers.heads.bev_depth_head import BEVDepthHead

from .base_bev_depth import BaseBEVDepth

__all__ = ['FusionBEVDepthPtsBEV']


class FusionBEVDepthPtsBEV(BaseBEVDepth):
    """Source code of `BEVDepth`, `https://arxiv.org/abs/2112.11790`.

    Args:
        backbone_conf (dict): Config of backbone.
        head_conf (dict): Config of head.
        is_train_depth (bool): Whether to return depth.
            Default: False.
    """

    # TODO: Reduce grid_conf and data_aug_conf
    def __init__(self, backbone_conf, backbone_pts_conf, head_conf, is_train_depth=False):
        super(BaseBEVDepth, self).__init__()
        self.backbone = LSSFPNPts(**backbone_conf)
        self.backbone_pts = BackbonePoint(**backbone_pts_conf)
        self.fuser = ConvFuser([backbone_conf['output_channels']] + backbone_pts_conf['pts_neck']['out_channels'], 256)
        self.head = BEVDepthHead(**head_conf)
        self.is_train_depth = is_train_depth

    def forward(
        self,
        sweep_imgs,
        mats_dict,
        pts_fv=None,
        pts=None,
        timestamps=None,
    ):
        """Forward function for BEVDepth

        Args:
            x (Tensor): Input feature map.
            mats_dict(dict):
                sensor2ego_mats(Tensor): Transformation matrix from
                    camera to ego with shape of (B, num_sweeps,
                    num_cameras, 4, 4).
                intrin_mats(Tensor): Intrinsic matrix with shape
                    of (B, num_sweeps, num_cameras, 4, 4).
                ida_mats(Tensor): Transformation matrix for ida with
                    shape of (B, num_sweeps, num_cameras, 4, 4).
                sensor2sensor_mats(Tensor): Transformation matrix
                    from key frame camera to sweep frame camera with
                    shape of (B, num_sweeps, num_cameras, 4, 4).
                bda_mat(Tensor): Rotation matrix for bda with shape
                    of (B, 4, 4).
            lidar_depth (Tensor): Depth generated by lidar.
            timestamps (long): Timestamp.
                Default: None.

        Returns:
            tuple(list[dict]): Output results for tasks.
        """
        if self.is_train_depth and self.training:
            x_img, depth_pred = self.backbone(sweep_imgs,
                                              mats_dict,
                                              pts_fv,
                                              timestamps,
                                              is_return_depth=True)
            x_pts = self.backbone_pts(pts)
            x = self.fuser([x_img, x_pts])
            preds = self.head(x)
            return preds, depth_pred
        else:
            x_img = self.backbone(sweep_imgs, mats_dict, pts_fv, timestamps)
            x_pts = self.backbone_pts(pts)
            x = self.fuser([x_img, x_pts])
            preds = self.head(x)
            return preds
